const dotenv = require("dotenv");
dotenv.config();
const { Telegraf } = require("telegraf");
const { Client } = require("pg");
const bot1 = new Telegraf(process.env.BOT_TOKEN1);
const bot2 = new Telegraf(process.env.BOT_TOKEN2);
const bot3 = new Telegraf(process.env.BOT_TOKEN3);
const axios = require("axios");

const client = new Client({
  connectionString: process.env.PG_DATABASE,
});
client.connect();

bot1.start(async (ctx) => {
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç TODAYPRICE, –±—É–¥—É –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–µ–ø–ª–æ—Ö–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const userExists = await client.query(
    `SELECT 1 FROM users WHERE userid = $1`,
    [ctx.from.id]
  );

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  if (userExists.rows.length === 0) {
    client.query(
      `INSERT INTO users (userid) VALUES ($1)`,
      [ctx.from.id],
      (err, res) => {
        if (err) {
          console.error(err);
        } else {
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");
        }
      }
    );
  }
});

bot2.start(async (ctx) => {
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç TODAYPRICE, –±—É–¥—É –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–µ–ø–ª–æ—Ö–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const userExists = await client.query(
    `SELECT 1 FROM users WHERE userid = $1`,
    [ctx.from.id]
  );

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  if (userExists.rows.length === 0) {
    client.query(
      `INSERT INTO users (userid) VALUES ($1)`,
      [ctx.from.id],
      (err, res) => {
        if (err) {
          console.error(err);
        } else {
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");
        }
      }
    );
  }
});

bot3.start(async (ctx) => {
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç TODAYPRICE, –±—É–¥—É –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–µ–ø–ª–æ—Ö–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const userExists = await client.query(
    `SELECT 1 FROM users WHERE userid = $1`,
    [ctx.from.id]
  );

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  if (userExists.rows.length === 0) {
    client.query(
      `INSERT INTO users (userid) VALUES ($1)`,
      [ctx.from.id],
      (err, res) => {
        if (err) {
          console.error(err);
        } else {
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");
        }
      }
    );
  }
});

bot1.command("stop", async (ctx) => {
  await setStop(ctx.from.id);
  ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏");
});
bot2.command("stop", async (ctx) => {
  await setStop(ctx.from.id);
  ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏");
});
bot3.command("stop", async (ctx) => {
  await setStop(ctx.from.id);
  ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏");
});

async function getUsers() {
  try {
    const users = await client.query("SELECT * FROM users WHERE stop = false");
    return users.rows;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
  }
}

async function setStop(userid) {
  try {
    await client.query("UPDATE users SET stop = true WHERE userid = $1", [
      userid,
    ]);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
  }
}

async function sendMessage(message, bot) {
  if (message == undefined) {
    return;
  }
  if (message?.label == "red" || message?.label == undefined) {
    return;
  }
  const users = await getUsers();
  const formatMessage = `–õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${message.address}
–í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ: ${message.footMetro} –º–∏–Ω—É—Ç
${message.difference ? `–î–∏—Å–∫–æ–Ω—Ç: ${message.difference}‚ÇΩ` : ""}
–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∫–∞: ${message.potential}‚ÇΩ
–õ–µ–π–±–ª: ${message.label == "green" ? "üü¢" : "üü°"}

${message.link}`;
  for (const user of users) {
    try {
      if (bot == 1) {
        await bot1.telegram.sendMessage(user.userid, formatMessage);
      } else if (bot == 2) {
        await bot2.telegram.sendMessage(user.userid, formatMessage);
      } else if (bot == 3) {
        await bot3.telegram.sendMessage(user.userid, formatMessage);
      }
    } catch (e) {
      console.log(e);
    }
  }
}

async function sendBestDeal() {
  const data = {
    email: "admin@admin.com",
    password: "string",
  };

  axios
    .post("http://localhost:3000/api/auth/login", data)
    .then((response) => {
      const token = response.data.access_token;
      axios
        .get("http://localhost:3000/api/bot/bestproperty", {
          headers: { Authorization: `Bearer ${token}` },
        })
        .then((response) => {
          const bestDeal = response.data;
          sendMessage(bestDeal[0], 1);
          sendMessage(bestDeal[1], 2);
          sendMessage(bestDeal[2], 3);
        })
        .catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", error);
        });
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    });
}
setInterval(async () => {
  try {
    await sendBestDeal();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", error);
  }
}, 1800000);

bot1.launch();
bot2.launch();
bot3.launch();
